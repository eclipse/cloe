From 27438664fd96004c2c5d30a4548552196f74e804 Mon Sep 17 00:00:00 2001
Date: Fri, 4 Feb 2022 11:15:14 +0100
Subject: [PATCH] VTD v2.2 fixes

---
 examples/OSMPDummySensor/OSMPDummySensor.cpp | 43 +++++++++++++-------
 examples/OSMPDummySensor/OSMPDummySensor.h   |  1 +
 2 files changed, 30 insertions(+), 14 deletions(-)

diff --git a/examples/OSMPDummySensor/OSMPDummySensor.cpp b/examples/OSMPDummySensor/OSMPDummySensor.cpp
index cade985..bba0f99 100644
--- a/examples/OSMPDummySensor/OSMPDummySensor.cpp
+++ b/examples/OSMPDummySensor/OSMPDummySensor.cpp
@@ -140,6 +140,18 @@ bool COSMPDummySensor::get_fmi_sensor_view_in(osi3::SensorView& data)
     }
 }

+bool COSMPDummySensor::get_fmi_sensor_data_in(osi3::SensorData& data)
+{
+    if (integer_vars[FMI_INTEGER_SENSORVIEW_IN_SIZE_IDX] > 0) {
+        void* buffer = decode_integer_to_pointer(integer_vars[FMI_INTEGER_SENSORVIEW_IN_BASEHI_IDX],integer_vars[FMI_INTEGER_SENSORVIEW_IN_BASELO_IDX]);
+        normal_log("OSMP","Got %08X %08X, reading from %p ...",integer_vars[FMI_INTEGER_SENSORVIEW_IN_BASEHI_IDX],integer_vars[FMI_INTEGER_SENSORVIEW_IN_BASELO_IDX],buffer);
+        data.ParseFromArray(buffer,integer_vars[FMI_INTEGER_SENSORVIEW_IN_SIZE_IDX]);
+        return true;
+    } else {
+        return false;
+    }
+}
+
 void COSMPDummySensor::set_fmi_sensor_data_out(const osi3::SensorData& data)
 {
     data.SerializeToString(&currentOutputBuffer);
@@ -246,9 +258,9 @@ void rotatePoint(double x, double y, double z,double yaw,double pitch,double rol
     double sin_pitch = sin(pitch);
     double sin_roll = sin(roll);

-    matrix[0][0] = cos_yaw*cos_pitch;  matrix[0][1]=cos_yaw*sin_pitch*sin_roll - sin_yaw*cos_roll; matrix[0][2]=cos_yaw*sin_pitch*cos_roll + sin_yaw*sin_roll;
-    matrix[1][0] = sin_yaw*cos_pitch;  matrix[1][1]=sin_yaw*sin_pitch*sin_roll + cos_yaw*cos_roll; matrix[1][2]=sin_yaw*sin_pitch*cos_roll - cos_yaw*sin_roll;
-    matrix[2][0] = -sin_pitch;         matrix[2][1]=cos_pitch*sin_roll;                            matrix[2][2]=cos_pitch*cos_roll;
+    matrix[0][0] = cos_yaw*cos_pitch;  matrix[1][0]=cos_yaw*sin_pitch*sin_roll - sin_yaw*cos_roll; matrix[2][0]=cos_yaw*sin_pitch*cos_roll + sin_yaw*sin_roll;
+    matrix[0][1] = sin_yaw*cos_pitch;  matrix[1][1]=sin_yaw*sin_pitch*sin_roll + cos_yaw*cos_roll; matrix[2][1]=sin_yaw*sin_pitch*cos_roll - cos_yaw*sin_roll;
+    matrix[0][2] = -sin_pitch;         matrix[1][2]=cos_pitch*sin_roll;                            matrix[2][2]=cos_pitch*cos_roll;

     rx = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;
     ry = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;
@@ -259,15 +271,18 @@ fmi2Status COSMPDummySensor::doCalc(fmi2Real currentCommunicationPoint, fmi2Real
 {
     DEBUGBREAK();

-    osi3::SensorView currentIn;
+    osi3::SensorData currentIn;
     osi3::SensorData currentOut;
     double time = currentCommunicationPoint+communicationStepSize;
     normal_log("OSI","Calculating Sensor at %f for %f (step size %f)",currentCommunicationPoint,time,communicationStepSize);
-    if (get_fmi_sensor_view_in(currentIn)) {
+    if (get_fmi_sensor_data_in(currentIn)) {
+        osi3::SensorView currentSensorViewIn;
+        if(currentIn.sensor_view_size())
+            currentSensorViewIn = currentIn.sensor_view(0);
         double ego_x=0, ego_y=0, ego_z=0;
-        osi3::Identifier ego_id = currentIn.global_ground_truth().host_vehicle_id();
+        osi3::Identifier ego_id = currentSensorViewIn.global_ground_truth().host_vehicle_id();
         normal_log("OSI","Looking for EgoVehicle with ID: %llu",ego_id.value());
-        for_each(currentIn.global_ground_truth().moving_object().begin(),currentIn.global_ground_truth().moving_object().end(),
+        for_each(currentSensorViewIn.global_ground_truth().moving_object().begin(),currentSensorViewIn.global_ground_truth().moving_object().end(),
             [this, ego_id, &ego_x, &ego_y, &ego_z](const osi3::MovingObject& obj) {
                 normal_log("OSI","MovingObject with ID %llu is EgoVehicle: %d",obj.id().value(), obj.id().value() == ego_id.value());
                 if (obj.id().value() == ego_id.value()) {
@@ -286,12 +301,12 @@ fmi2Status COSMPDummySensor::doCalc(fmi2Real currentCommunicationPoint, fmi2Real
         currentOut.mutable_timestamp()->set_seconds((long long int)floor(time));
         currentOut.mutable_timestamp()->set_nanos((int)((time - floor(time))*1000000000.0));
         /* Copy of SensorView */
-        currentOut.add_sensor_view()->CopyFrom(currentIn);
+        currentOut.add_sensor_view()->CopyFrom(currentSensorViewIn);

         int i=0;
         double actual_range = fmi_nominal_range()*1.1;
-        for_each(currentIn.global_ground_truth().moving_object().begin(),currentIn.global_ground_truth().moving_object().end(),
-            [this,&i,&currentIn,&currentOut,ego_id,ego_x,ego_y,ego_z,actual_range](const osi3::MovingObject& veh) {
+        for_each(currentSensorViewIn.global_ground_truth().moving_object().begin(),currentSensorViewIn.global_ground_truth().moving_object().end(),
+            [this,&i,&currentSensorViewIn,&currentOut,ego_id,ego_x,ego_y,ego_z,actual_range](const osi3::MovingObject& veh) {
                 if (veh.id().value() != ego_id.value()) {
                     // NOTE: We currently do not take sensor mounting position into account,
                     // i.e. sensor-relative coordinates are relative to center of bounding box
@@ -308,10 +323,10 @@ fmi2Status COSMPDummySensor::doCalc(fmi2Real currentCommunicationPoint, fmi2Real
                         obj->mutable_header()->mutable_tracking_id()->set_value(i);
                         obj->mutable_header()->set_existence_probability(cos((2.0*distance-actual_range)/actual_range));
                         obj->mutable_header()->set_measurement_state(osi3::DetectedItemHeader_MeasurementState_MEASUREMENT_STATE_MEASURED);
-                        obj->mutable_header()->add_sensor_id()->CopyFrom(currentIn.sensor_id());
-                        obj->mutable_base()->mutable_position()->set_x(veh.base().position().x());
-                        obj->mutable_base()->mutable_position()->set_y(veh.base().position().y());
-                        obj->mutable_base()->mutable_position()->set_z(veh.base().position().z());
+                        obj->mutable_header()->add_sensor_id()->CopyFrom(currentSensorViewIn.sensor_id());
+                        obj->mutable_base()->mutable_position()->set_x(rel_x);
+                        obj->mutable_base()->mutable_position()->set_y(rel_y);
+                        obj->mutable_base()->mutable_position()->set_z(rel_z);
                         obj->mutable_base()->mutable_dimension()->set_length(veh.base().dimension().length());
                         obj->mutable_base()->mutable_dimension()->set_width(veh.base().dimension().width());
                         obj->mutable_base()->mutable_dimension()->set_height(veh.base().dimension().height());
diff --git a/examples/OSMPDummySensor/OSMPDummySensor.h b/examples/OSMPDummySensor/OSMPDummySensor.h
index 7f92690..d41b545 100644
--- a/examples/OSMPDummySensor/OSMPDummySensor.h
+++ b/examples/OSMPDummySensor/OSMPDummySensor.h
@@ -221,6 +221,7 @@ protected:
     void set_fmi_sensor_view_config_request(const osi3::SensorViewConfiguration& data);
     void reset_fmi_sensor_view_config_request();
     bool get_fmi_sensor_view_in(osi3::SensorView& data);
+    bool get_fmi_sensor_data_in(osi3::SensorData &data);
     void set_fmi_sensor_data_out(const osi3::SensorData& data);
     void reset_fmi_sensor_data_out();

--
2.25.1

