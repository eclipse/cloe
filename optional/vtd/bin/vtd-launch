#!/usr/bin/env python3

import logging
import os
import shlex
import shutil
import subprocess
import sys
import tarfile
from pathlib import Path
from typing import Dict, List, Optional

import click
import libtmux


@click.group()
@click.option(
    "-v",
    "--verbose",
    envvar="CLOE_VERBOSE",
    count=True,
    help="Print more information (env: $CLOE_VERBOSE).",
)
@click.option(
    "-r",
    "--vtd-root",
    envvar="VTD_ROOT",
    type=click.Path(exists=True, file_okay=False, dir_okay=True),
    required=True,
    help="VTD installation directory (env: $VTD_ROOT).",
)
@click.option(
    "--runtime-dir",
    envvar="VTD_RUNTIME_DIR",
    type=click.Path(file_okay=False, dir_okay=True),
    required=True,
    default="/tmp/vtd-runtime",
    help="VTD runtime directory (env: $VTD_RUNTIME_DIR).",
)
@click.option(
    "--tmux-session",
    type=str,
    default="vtd",
    required=True,
    help="The tmux session name to use.",
)
@click.option(
    "-l",
    "--logfile",
    type=click.Path(file_okay=True, dir_okay=False),
    help="VTD logfile path.",
)
@click.pass_context
def main(
    ctx,
    verbose: int,
    vtd_root: str,
    runtime_dir: str,
    tmux_session: str,
    logfile: str,
):
    """Start and stop a VTD simulation."""

    if verbose == 0:
        level = logging.WARNING
    elif verbose == 1:
        level = logging.INFO
    else:
        level = logging.DEBUG
    logging.basicConfig(format="%(message)s", stream=sys.stderr, level=level)

    class Options:
        def __init__(self, root: str, runtime: str, session_name: str, log_file: str):
            self.root_dir = Path(root)
            self.runtime_dir = Path(runtime)
            self.tmux = libtmux.Server()
            self.session_name = session_name
            self.log_file = log_file

        def get_session(self) -> Optional[libtmux.Session]:
            return self.tmux.find_where({"session_name": self.session_name})

        def has_session(self) -> bool:
            return self.tmux.has_session(self.session_name)

        def new_session(self) -> libtmux.Session:
            return self.tmux.new_session(self.session_name)

    ctx.obj = Options(vtd_root, runtime_dir, tmux_session, logfile)


# _________________________________________________________________________
# Command: setup
@main.command("setup")
@click.pass_obj
def setup(opt):
    """Set up a fake VTD installation directory, containing links for all
    files from the VTD installation.

    This creates a fake installation of VTD in a temporary directory by creating
    symlinks to the original installation, and allows us to use different
    VTD setups and projects without modifying the original VTD installation.
    """

    logging.info(f"Set up VTD installation facade: {opt.runtime_dir}")
    teardown_runtime(opt.runtime_dir)
    setup_runtime(opt.root_dir, opt.runtime_dir)


def setup_runtime(vtd_root: Path, runtime_dir: Path) -> None:
    logging.debug(f"Create directory: {runtime_dir}")
    os.makedirs(runtime_dir)

    for file in vtd_root_symlink_targets():
        src = vtd_root / file
        dst = runtime_dir / file
        logging.debug(f"Create symlink: {dst} -> {src}")
        os.symlink(src, dst)

    for file in ["Distros", "Projects", "Setups"]:
        srcdir = vtd_root / "Data" / file
        dstdir = runtime_dir / "Data" / file
        logging.debug(f"Create directory: {dstdir}")
        os.makedirs(dstdir)

        for file in os.listdir(srcdir):
            srcfile = srcdir / file
            dstfile = dstdir / file
            logging.debug(f"Create symlink: {dstfile} -> {srcfile}")
            os.symlink(srcfile, dstfile)


def vtd_root_symlink_targets() -> List[str]:
    return ["bin", "bundled", "Develop", "Runtime"]


# _________________________________________________________________________
# Command: teardown
@main.command("teardown")
@click.pass_obj
def teardown(opt):
    """Tear down a fake VTD installation directory."""

    logging.info(f"Tear down VTD installation facade: {opt.runtime_dir}")
    teardown_runtime(opt.runtime_dir)


def teardown_runtime(runtime_dir: Path) -> None:
    if runtime_dir.exists():
        verify_runtime_contents(runtime_dir)
        logging.debug(f"Remove VTD installation facade: {runtime_dir}")
        shutil.rmtree(runtime_dir, ignore_errors=False)


def verify_runtime_contents(runtime_dir: Path) -> None:
    for d in os.listdir(runtime_dir):
        if d not in vtd_root_symlink_targets() + ["Data"]:
            raise RuntimeError(
                f"Unrecognized content in runtime directory: {runtime_dir}/{d}"
            )


# _________________________________________________________________________
# Command: start [--skip-setup]
@main.command("start")
@click.option(
    "--skip-setup",
    is_flag=True,
    help="Skip (re-)creation of VTD installation facade.",
)
@click.option(
    "-s",
    "--vtd-setup",
    type=click.Path(exists=True, file_okay=True, dir_okay=True),
    help="Path to VTD setup to use, default to currently symlinked.",
)
@click.option(
    "-S",
    "--vtd-setup-cloe",
    type=click.Choice(
        # FIXME: Support .tgz AND directories!
        [Path(s).stem for s in os.listdir(os.getenv("VTD_SETUP_DIR"))],
        case_sensitive=False,
    ),
    help="VTD setup to use from (env: $VTD_SETUP_DIR). Default from VTD.",
)
@click.option(
    "-p",
    "--vtd-project",
    type=click.Path(exists=True, file_okay=True, dir_okay=True),
    help="VTD project to use, default to currently symlinked.",
)
@click.option(
    "-m",
    "--vtd-external-models",
    envvar="VTD_EXTERNAL_MODELS",
    multiple=True,
    type=click.Path(file_okay=True, dir_okay=False),
    default=[],
    required=False,
    help="VTD external models (env: $VTD_EXTERNAL_MODELS).",
)
@click.option(
    "-n",
    "--no-start",
    is_flag=True,
    help="Setup VTD facade installation, but don't start VTD.",
)
@click.option(
    "-a",
    "--vtd-args",
    type=str,
    default="",
    help="Extra arguments to pass to VTD.",
)
@click.pass_obj
def start(
    opt,
    skip_setup: bool,
    vtd_setup: str,
    vtd_setup_cloe: str,
    vtd_project: str,
    vtd_external_models: List[str],
    no_start: bool,
    vtd_args: str,
):
    """Start a new VTD simulation in a fake VTD installation directory.

    This creates a fake installation of VTD in a temporary directory by creating
    symlinks to the original installation, and allows us to use different
    VTD setups and projects without modifying the original VTD installation.
    This step can be skipped with --skip-setup, if you already have a setup
    created.

    Then a VTD simulation is started in this fake installation.
    """

    if opt.has_session():
        raise click.UsageError(f"tmux session already exists: {opt.session_name}")

    if not skip_setup:
        logging.info(f"Set up VTD installation facade: {opt.runtime_dir}")
        teardown_runtime(opt.runtime_dir)
        setup_runtime(opt.root_dir, opt.runtime_dir)

    if vtd_setup is not None:
        logging.info(f"Select setup: {vtd_setup}")
        if Path(vtd_setup).exists():
            vtd_setup = Path(vtd_setup).resolve()
        dst = opt.runtime_dir / "Data" / "Setups" / "Current"
        if dst.exists():
            os.remove(dst)
        shutil.copytree(vtd_setup, dst, symlinks=True)

    elif vtd_setup_cloe is not None:
        # Compressing will add a timestamp to the package and therefore 
        # leads to different package_hashes everytime we export with conan.
        # To avoid that, changing from .tgz to .tar was necessary
        vtd_setup_cloe = Path(os.getenv("VTD_SETUP_DIR")) / f"{vtd_setup_cloe}.tar"
        logging.info(f"Use setup: {vtd_setup_cloe}")
        with tarfile.open(vtd_setup_cloe, "r:tar") as tar:
            dst = opt.runtime_dir / "Data" / "Setups" / "Current"
            if dst.exists():
                os.remove(dst)
            if not Path(vtd_setup_cloe.stem).exists():
                tar.extractall(path=dst.parent)
            os.symlink(vtd_setup_cloe.stem, dst)

    if vtd_project is not None:
        logging.info(f"Select project: {vtd_project}")
        if Path(vtd_project).exists():
            vtd_project = Path(vtd_project).resolve()
        dst = opt.runtime_dir / "Data" / "Projects" / "Current"
        if dst.exists():
            os.remove(dst)
        os.symlink(vtd_project, dst)

    for srcfile in vtd_external_models:
        srcfile = Path(srcfile)
        dstdir = opt.runtime_dir / "Data" / "Setups" / "Current" / "Bin"
        dstfile = dstdir / srcfile.name
        if not dstfile.is_file():
            logging.debug(f"Create symlink: {dstfile} -> {srcfile}")
            os.symlink(srcfile, dstfile)

    if no_start:
        return

    logging.info("Starting VTD in Tmux session")
    session = opt.new_session()
    window = session.attached_window
    window.rename_window("vtd")
    pane = window.attached_pane
    pane.clear()

    if opt.log_file:
        log_file = shlex.quote(str(opt.log_file))
        pane.cmd("pipe", f"cat >> {log_file}")
    runtime_dir = shlex.quote(str(opt.runtime_dir))
    pane.send_keys(f"cd {runtime_dir}")
    pane.send_keys(f"export VTD_ROOT={runtime_dir}")
    pane.send_keys(f"bin/vtdStart.sh {vtd_args}")


# _________________________________________________________________________
# Command: stop [--skip-teardown]
@main.command("stop")
@click.option(
    "--skip-teardown",
    is_flag=True,
    help="Skip removal of VTD installation facade.",
)
@click.pass_obj
def stop(opt, skip_teardown: bool):
    """Stop a currently running VTD simulation."""

    if opt.has_session():
        session = opt.get_session()
        subprocess.call([opt.runtime_dir / "bin" / "vtdStop.sh"])
        session.kill_session()

    if not skip_teardown:
        teardown_runtime(opt.runtime_dir)


if __name__ == "__main__":
    main()
