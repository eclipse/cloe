# Makefile.all
#
# This file defines all packages available for building and defines their
# dependencies, so that make can build them in parallel effectively.
#

# Make configuration:
SHELL := /bin/bash
GNUMAKEFLAGS := --no-print-directory
SUBMAKEFLAGS :=

## USE_NPROC
##   Usage: make USE_NPROC=1 <targets>
##   Default: 0
##
##   If set to 1, this will force $(nproc) number of package builds at a
##   time, taking dependencies into account. This provides up to a ~50%
##   speed-up, but makes reading error messages more difficult.
##
##   You can override the number of jobs by also setting NPROC. For example:
##
##       make USE_NPROC=1 NPROC=3 <targets>
##
USE_NPROC := 0
ifeq (${USE_NPROC},1)
NPROC := $(shell nproc 2>/dev/null)
ifdef NPROC
SUBMAKEFLAGS += -j${NPROC}
endif
endif

## UNSELECT_PKGS
##   Usage: make UNSELECT_PKGS="pkg1 pkg2 ..." <targets>
##   Default: ""
##
##   This variable contains packages that should be unselected for the action.
##   This should only be provided from the command line, for example:
##
##       make UNSELECT_PKGS="plugins/vtd plugins/demo_printer" package
##
UNSELECT_PKGS :=

## SELECT_PKGS
##   Usage: make SELECT_PKGS="pkg1 pkg2 ..." <targets>
##   Default: ""
##
##   This can be used to explicitly set the selected packages. Using this
##   overrides UNSELECT_PKG.
##
SELECT_PKGS :=

## BUILD_POLICY
##   Usage: make BUILD_POLICY="outdated"
##   Default: "missing"
##
##   This variable contains the default Conan build policy for package targets.
##
BUILD_POLICY := missing

## CONAN_OPTIONS
##   Usage: make CONAN_OPTIONS="..."
##   Default: ""
##
##   This variable contains options that are passed on to the following Conan
##   commands:
##
##     conan create
##       for the package and package-outdated targets.
##     conan install
##       for all other targets.
##
##   So see conan create --help and conan install --help for which options
##   are valid in these contexts.
##
CONAN_OPTIONS :=

## WITH_ENGINE
##   Usage: make WITH_ENGINE=0 <targets>
##   Default: 1
##
WITH_ENGINE := 1

## WITH_VTD
##   Usage: make WITH_VTD=1 <targets>
##   Default: 0
##
WITH_VTD := 0

## BUILD_TESTS
##   Usage: make BUILD_TESTS=0 package
##   Default: 1
##
##   If set to 0, all packages that contain tests will not build the test
##   binaries. This exists to let us build an alpine Docker image and also
##   to showcase how to correctly pass options to all packages.
##
BUILD_TESTS := 1

# --------------------------------------------------------------------------- #

# Define all packages with their dependencies:
# - Ensure USE_NPROC=1 works.
# - Ensure packages are built in correct order.
ALL_VENDOR_PKGS := $(wildcard vendor/*)
ALL_RUNTIME_PKGS := fable runtime models
ALL_ENGINE_PKGS := oak engine
ALL_PLUGIN_PKGS := $(wildcard plugins/*)
ALL_PKGS := ${ALL_RUNTIME_PKGS} ${ALL_ENGINE_PKGS} ${ALL_PLUGIN_PKGS} cloe
.PHONY: ${ALL_VENDOR_PKGS} ${ALL_PKGS}

REGEX_TARGET := 's/(-vendor|-select)?-each//'
$(filter-out cloe, ${ALL_PKGS} ${ALL_VENDOR_PKGS}):
	${MAKE} -C $@ $(shell echo ${MAKECMDGOALS} | sed -re ${REGEX_TARGET})

# Re-define cloe target to use Makefile.package, and only run for targets
# where it makes sense, since "cloe" is a Conan meta-package.
cloe:
	for case in export package package-outdated list purge clean; do \
		if [[ "$$(echo '${MAKECMDGOALS}' | sed -re ${REGEX_TARGET})" == "$${case}" ]]; then \
			${MAKE} -f Makefile.package CONAN_OPTIONS="${CONAN_OPTIONS}" $${case}; \
		fi \
	done

fable:
runtime: fable
models: runtime
oak: runtime
engine: models oak
${ALL_PLUGIN_PKGS}: runtime models

# Select packages to use:
# - Define recipes only for selected packages.
# - Ensure CONAN_OPTIONS are correct for cloe metapackage.
# - SELECT_PKGS contains final list of selected packages.

ifeq (${WITH_ENGINE},0)
ALL_PKGS := $(filter-out oak, ${ALL_PKGS})
ALL_PKGS := $(filter-out engine, ${ALL_PKGS})
CONAN_OPTIONS += -o cloe:with_engine=False
endif

ifeq (${WITH_VTD},1)
CONAN_OPTIONS += -o cloe:with_vtd=True
else
ALL_PKGS := $(filter-out plugins/vtd, ${ALL_PKGS})
endif

ifeq (${BUILD_TESTS},0)
CONAN_OPTIONS += -o cloe:test=False
CONAN_OPTIONS += -o fable:test=False
CONAN_OPTIONS += -o cloe-runtime:test=False
CONAN_OPTIONS += -o cloe-models:test=False
CONAN_OPTIONS += -o cloe-oak:test=False
ifeq (${WITH_ENGINE},1)
CONAN_OPTIONS += -o cloe-engine:test=False
endif
ifeq (${WITH_VTD},1)
CONAN_OPTIONS += -o cloe-plugin-vtd:test=False
endif
CONAN_OPTIONS += -o cloe-plugin-basic:test=False
CONAN_OPTIONS += -o cloe-plugin-noisy-sensor:test=False
endif

SELECT_PKGS := $(filter-out ${UNSELECT_PKGS}, ${ALL_PKGS})

define make_target_help
help::
	@printf "  % -20s to %s\n" ${1} ${2}
endef

define make_target_rule
${1}:
	@printf "________________________________________"
	@printf "________________________________________\n"
	@printf ":: Proceeding to%s\n" "$(shell echo "${3}" | sed -re 's/ +/ /g')"
	${MAKE} ${SUBMAKEFLAGS} ${4} ${2}
endef

define make_target_rules
$(call make_target_help,${1},${2})
$(call make_target_rule,${1},${1}-each,${2},)
${1}-each: ${3}
endef

define make_vendor_target
$(eval $(call make_target_rules,${1},${2},${ALL_VENDOR_PKGS}))
endef

define make_every_target
$(eval $(call make_target_rules,${1},${2},${ALL_PKGS}))
endef

define make_select_target
$(eval $(call make_target_rules,${1},${2},${SELECT_PKGS}))
endef

define make_cloe_rules
$(call make_target_help,${1},${2})
$(call make_target_rule,${1},${1},${2},-f Makefile.package CONAN_OPTIONS="${CONAN_OPTIONS}")
endef

define make_cloe_target
$(eval $(call make_cloe_rules,${1},${2}))
endef

# --------------------------------------------------------------------------- #

.PHONY: help
.DEFAULT: help
.SILENT: help
help::
	echo "Available build targets:"

$(call make_vendor_target, export-vendor,      "export all vendor packages                  [conan-cache]")
$(call make_vendor_target, package-vendor,     "create all vendor packages                  [conan-cache]")

help::
	echo

$(call make_every_target, export,              "export all package recipes                  [conan-cache]")
$(call make_cloe_target, package,              "create cloe package with build policy       [conan-cache]")
$(call make_cloe_target, package-all,          "create cloe package and all dependencies    [conan-cache]")
$(call make_cloe_target, package-outdated,     "create cloe package if outdated             [conan-cache]")

help::
	echo

$(call make_select_target, export-select,      "export selected packages                    [conan-cache]")
$(call make_select_target, package-select,     "create selected packages with policy        [conan-cache]")
$(call make_select_target, list-select,        "list selected package install files         [conan-cache]")
$(call make_select_target, purge-select,       "remove selected packages from cache         [conan-cache]")

help::
	echo

$(call make_select_target, editable-select,    "toggle [in-source] build for selected packages")
$(call make_select_target, uneditable-select,  "toggle [conan-cache] build for selected packages")

help::
	echo

$(call make_select_target, all-select,         "build selected packages                     [in-source]")
$(call make_select_target, conan-select,       "configure Conan and get dependencies        [in-source]")
$(call make_select_target, configure-select,   "configure CMake packages                    [in-source]")
$(call make_select_target, test-select,        "run CMake tests if they are available       [in-source]")
$(call make_select_target, export-pkg-select,  "export build artifacts to Conan cache       [in-source]")
$(call make_select_target, clean-select,       "remove build artifacts                      [in-source]")

help::
	echo
	echo "  Options:"
	echo "    USE_NPROC=(0|1)    to build $(shell nproc) packages simultaneously (default=0)"
	echo "    WITH_ENGINE=(0|1)  to build and deploy cloe-engine (default=1)"
	echo "    WITH_VTD=(0|1)     to build and deploy cloe-plugin-vtd (default=0)"
	echo "    BUILD_TESTS=(0|1)  to build and run unit tests (default=1)"
	echo
	echo "  Defines:"
	echo "    BUILD_POLICY:  ${BUILD_POLICY}"
	echo "    CONAN_OPTIONS: ${CONAN_OPTIONS}"
	echo "    UNSELECT_PKGS: ${UNSELECT_PKGS}"
	echo "    SELECT_PKGS:   \\"
	echo "$$(echo "      ${SELECT_PKGS}" | fmt -70)"
	echo
	echo "  Please see Makefile.all for more details and usage tips."
	echo
