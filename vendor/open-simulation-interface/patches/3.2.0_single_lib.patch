--- CMakeLists.txt.original	2023-12-11 10:20:55.975913154 +0100
+++ CMakeLists.txt	2023-12-11 10:22:57.887983720 +0100
@@ -43,7 +43,6 @@
 set(INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH
     "Installation directory for CMake files")
 
-set(INSTALL_LIB_DIR ${INSTALL_LIB_DIR}/osi${VERSION_MAJOR})
 set(INSTALL_INCLUDE_DIR ${INSTALL_INCLUDE_DIR}/osi${VERSION_MAJOR})
 
 configure_file(osi_version.proto.in ${CMAKE_CURRENT_SOURCE_DIR}/osi_version.proto)
@@ -79,53 +78,17 @@
 
 protobuf_generate_cpp(PROTO_SRCS PROTO_HEADERS ${OSI_PROTO_FILES})
 
-add_library(${PROJECT_NAME}_static STATIC ${PROTO_SRCS} ${PROTO_HEADERS})
-target_include_directories(${PROJECT_NAME}_static
-    PUBLIC
-        ${PROTOBUF_INCLUDE_DIR}
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
-        $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
-)
-target_link_libraries(${PROJECT_NAME}_static PUBLIC ${PROTOBUF_LIBRARY})
-install(TARGETS ${PROJECT_NAME}_static
-        EXPORT ${PROJECT_NAME}_targets
-        ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib)
-
-
-add_library(${PROJECT_NAME}_obj OBJECT ${PROTO_SRCS} ${PROTO_HEADERS})
-target_include_directories(${PROJECT_NAME}_obj
-    PUBLIC
-        ${PROTOBUF_INCLUDE_DIR}
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
-        $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
-)
-set_property(TARGET ${PROJECT_NAME}_obj PROPERTY POSITION_INDEPENDENT_CODE ON)
-
-
-add_library(${PROJECT_NAME}_pic STATIC $<TARGET_OBJECTS:${PROJECT_NAME}_obj>)
-
-target_include_directories(${PROJECT_NAME}_pic
-    PUBLIC
-        ${PROTOBUF_INCLUDE_DIR}
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
-        $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
-)
-target_link_libraries(${PROJECT_NAME}_pic PUBLIC ${PROTOBUF_LIBRARY})
-
-set_property(TARGET ${PROJECT_NAME}_pic PROPERTY POSITION_INDEPENDENT_CODE ON)
+add_library(${PROJECT_NAME} ${PROTO_SRCS} ${PROTO_HEADERS})
+target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_11)
 
-install(TARGETS ${PROJECT_NAME}_pic
-        EXPORT ${PROJECT_NAME}_targets
-        ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib)
-
-add_library(${PROJECT_NAME} SHARED $<TARGET_OBJECTS:${PROJECT_NAME}_obj>)
 target_include_directories(${PROJECT_NAME}
     PUBLIC
-        ${PROTOBUF_INCLUDE_DIR}
         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
         $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
 )
 
+target_link_libraries(${PROJECT_NAME} PUBLIC protobuf::libprotobuf)
+
 set_property(
     TARGET ${PROJECT_NAME}
     PROPERTY SOVERSION ${${PROJECT_NAME}_SOVERSION}
@@ -135,6 +98,11 @@
     PROPERTY VERSION ${${PROJECT_NAME}_LIBVERSION}
 )
 
+    set_property(
+    TARGET ${PROJECT_NAME}
+    PROPERTY VERSION ${${PROJECT_NAME}_LIBVERSION}
+)
+
 target_link_libraries(${PROJECT_NAME} PUBLIC ${PROTOBUF_LIBRARY})
 install(TARGETS ${PROJECT_NAME}
         EXPORT ${PROJECT_NAME}_targets
@@ -169,33 +137,3 @@
 install(EXPORT ${PROJECT_NAME}_targets
         DESTINATION "${INSTALL_CMAKE_DIR}"
         COMPONENT dev)
-
-# add a target to generate API documentation with Doxygen
-# Dependencies: Doxygen and proto2cpp.py
-FIND_PACKAGE(Doxygen)
-set(FILTER_PROTO2CPP_PY_PATH CACHE PATH "directory to the filter proto2cpp.py")
-
-if(NOT DOXYGEN_FOUND)
-
-    message(WARNING  "Doxygen could not be found.")
-
-else()
-
-    if(NOT EXISTS ${FILTER_PROTO2CPP_PY_PATH}/proto2cpp.py)
-
-    message(WARNING  "${FILTER_PROTO2CPP_PY_PATH}/proto2cpp.py could not be found.")
-
-    else()
-
-        set(doxyfile_in ${CMAKE_CURRENT_SOURCE_DIR}/doxygen_config.cmake.in)
-        set(doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
-
-        configure_file(${doxyfile_in} ${doxyfile} @ONLY)
-
-        ADD_CUSTOM_TARGET(api_doc ALL
-        COMMAND ${DOXYGEN_EXECUTABLE} ${doxyfile}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
-
-    endif(NOT EXISTS ${FILTER_PROTO2CPP_PY_PATH}/proto2cpp.py)
-
-endif(NOT DOXYGEN_FOUND)
