# Makefile.setup
# vim: set noet:
#
# Usage: make -f Makefile.setup setup
#
# This Makefile defines targets for setting up a development environment.
# It is separate from the project Makefile in order to minimize Docker
# cache invalidation and also to improve readability.
#

PROJECT_ROOT := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))
CONAN_DIR := $(shell conan config home 2>/dev/null || echo "$HOME/.conan")

include ${PROJECT_ROOT}/Makefile.help

APT := $(or \
	$(shell command -v apt 2>/dev/null), \
	$(shell command -v apt-get 2>/dev/null) \
)
APT_ARGS := --no-install-recommends -y

PACMAN := $(shell command -v pacman 2>/dev/null)
PACMAN_ARGS := --noconfirm --needed

PIP := $(or \
	$(shell command -v pip3 2>/dev/null), \
	$(shell command -v pip 2>/dev/null) \
)
ifeq (${VIRTUAL_ENV}, )
PIP_INSTALL_ARGS := --user --upgrade
else
PIP_INSTALL_ARGS := --upgrade
endif

PIPX := $(shell command -v pipx 2>/dev/null)
PIPX_INSTALL_ARGS :=
ifndef PIPX
PIPX := ${PIP}
PIPX_INSTALL_ARGS := ${PIP_INSTALL_ARGS}
endif

.PHONY: help
.DEFAULT: help
.SILENT: help
help::
	$(call print_help_section, "Available setup targets")
	$(call print_help_target, setup-git, "perform Git repository setup")
	$(call print_help_target, setup-conan, "install Conan profile")
	$(call print_help_target, install-system-deps, "install build (and development) system requirements")
	$(call print_help_target, install-python-deps, "install Python runtime requirements with ${_dim}${PIP}${_rst}")
	$(call print_help_target, install-sphinx-deps, "install Sphinx runtime requirements with ${_dim}${PIP}${_rst}")
	$(call print_help_target, install-python-tools, "install Python development tools with ${_dim}${PIPX}${_rst}")
	echo

.PHONY: setup-git setup-conan
setup-git:
	git config --local core.hooksPath .git-hooks/

setup-conan:
	# Install Conan if it is not available.
	if ! command -v conan >/dev/null 2>&1; then ${PIP} install --user conan; fi
	# Initialize Conan configuration if it doesn't already exist.
	#
	# Since running any conan command, even conan --help creates ${CONAN_DIR}
	# and the default configuration, we rely on the existence of the default
	# profile as an indication that we have a "fresh" setup where we can
	# make our override.
	if [ ! -f ${CONAN_DIR}/profiles/default ]; then \
		conan config init; \
		conan profile update settings.compiler.libcxx=libstdc++11 default; \
		conan profile update settings.build_type=RelWithDebInfo default; \
	fi
	if ! conan config get general.revisions_enabled >/dev/null 2>&1; then \
		conan config set general.revisions_enabled=True; \
	fi
	# Install cloe-debug and cloe-release profiles.
	if [ -d "${PROJECT_ROOT}/dist/conan" ]; then \
		install "${PROJECT_ROOT}/dist/conan/cloe-debug.profile" "${CONAN_DIR}/profiles/cloe-debug"; \
		install "${PROJECT_ROOT}/dist/conan/cloe-release.profile" "${CONAN_DIR}/profiles/cloe-release"; \
	fi

.PHONY: install-system-deps install-ubuntu-deps install-archlinux-deps install-python-deps install-python-tools install-sphinx-deps
install-system-deps::

# Ubuntu ----------------------------------------------------------------------
ifdef APT
install-system-deps:: install-ubuntu-deps
endif

install-ubuntu-deps::
	command -v ${APT} >/dev/null 2>&1
	${APT} install ${APT_ARGS} \
		bats \
		build-essential \
		clang-format \
		cmake \
		doxygen \
		curl \
		file \
		git \
		gnuplot \
		graphviz \
		jq \
		patchelf \
		psmisc \
		python3-setuptools \
		python3-pip \
        python3-venv \
		time \
		tmux \
		;

# Archlinux -------------------------------------------------------------------
ifdef PACMAN
install-system-deps:: install-archlinux-deps
endif

install-archlinux-deps::
	command -v ${PACMAN} >/dev/null 2>&1
	${PACMAN} -S ${PACMAN_ARGS} \
		base-devel \
		bash \
		bash-bats \
		clang \
		cmake \
		curl \
		doxygen \
		git \
		gnuplot \
		graphviz \
		jq \
		patchelf \
		psmisc \
		python-pip \
		python-virtualenv \
		time \
		tmux \
		;

# Python ----------------------------------------------------------------------
install-python-deps::
	command -v ${PIP} >/dev/null 2>&1
	${PIP} install ${PIP_INSTALL_ARGS} \
		click \
		conan \
		libtmux \
		toml \
		pipx \
		;

install-sphinx-deps:
	command -v ${PIP} >/dev/null 2>&1
	${PIP} install ${PIP_INSTALL_ARGS} -r docs/requirements.txt

install-python-tools::
	command -v ${PIPX} >/dev/null 2>&1
	for pkg in \
		black \
		mypy \
		flake8 \
		poetry \
		pylint \
		yq \
		; \
	do \
		${PIPX} install ${PIPX_INSTALL_ARGS} $${pkg}; \
	done
